<%- include('includes/header') %>
<%- include('includes/sidebar') %>
<%- include('includes/topbar') %>  
    
    

        <!-- Begin Page Content -->
        <div class="container-fluid-map">

          <!-- Page Heading -->
          

          <!-- Content Row -->
          <div class="row-map">
            
            <div id="map" ></div>
            
    
            
            <!-- <button id="add" data-toggle="modal" data-target="#modalRegisterForm"><i class="fas fa-plus-circle"></i></button>  -->
            
         
            

  
 
          <!-- Content Row -->
          
        </div>

        </div>
      <!-- End of Main Content -->

      <!-- Footer -->
      <footer class="sticky-footer ">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span>Copyright &copy; VimAI 2020</span>
          </div>
        </div>
      </footer>
      <!-- End of Footer -->

    </div>
    <!-- End of Content Wrapper -->

  </div>
  <!-- End of Page Wrapper -->

  </div>



</div>

<script>
  

  mapboxgl.accessToken = '<%= mapBoxToken %>';
  var posts = {features: <%- JSON.stringify(posts) %> };




var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/light-v9',
    center: [24.655899, 60.205490],
    accessToken: mapboxgl.accessToken,
    zoom: 2
});

map.addControl(new MapboxGeocoder({
    accessToken: mapboxgl.accessToken
}));

map.on('load', function() {
    // Add a new source from our GeoJSON data and set the
    // 'cluster' option to true. GL-JS will add the point_count property to your source data.
    map.addSource("posts", {
        type: "geojson",
        data: posts,
        cluster: true,
        clusterMaxZoom: 14, // Max zoom to cluster points on
        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
    });

    map.addLayer({
        id: "clusters",
        type: "circle",
        source: "posts",
        filter: ["has", "point_count"],
        paint: {
            
            "circle-color": [
                "step",
                ["get", "point_count"],
                "#51bbd6",
                100,
                "#f1f075",
                750,
                "#f28cb1"
            ],
            "circle-radius": [
                "step",
                ["get", "point_count"],
                20,
                100,
                30,
                750,
                40
            ]
        }
    });

    map.addLayer({
        id: "cluster-count",
        type: "symbol",
        source: "posts",
        filter: ["has", "point_count"],
        layout: {
            "text-field": "{point_count_abbreviated}",
            "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
            "text-size": 12
        }
    });

    map.addLayer({
        id: "unclustered-point",
        type: "circle",
        source: "posts",
        filter: ["!", ["has", "point_count"]],
        paint: {
            "circle-color": "#11b4da",
            "circle-radius": 5,
            "circle-stroke-width": 1,
            "circle-stroke-color": "#fff"
        }
    });

    map.on('click', 'unclustered-point', function(e) {
      var coordinates = e.features.features[0].geometry.coordinates.slice();
      var description = e.features.features[0].properties.description;

      // Ensure that if the map is zoomed out such that multiple
      // copies of the feature are visible, the popup appears
      // over the copy being pointed to.
      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
      }

      new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(description)
        .addTo(map);
    });

    // inspect a cluster on click
    map.on('click', 'clusters', function(e) {
        var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
        var clusterId = features[0].properties.cluster_id;
        map.getSource('posts').getClusterExpansionZoom(clusterId, function (err, zoom) {
            if (err)
                return;

            map.easeTo({
                center: features.features[0].geometry.coordinates,
                zoom: zoom
            });
        });
    });

    var mouseenterCursor = function() {
        map.getCanvas().style.cursor = 'pointer';
    };
    var mouseLeaveCursor = function() {
        map.getCanvas().style.cursor = '';
    };
    map.on('mouseenter', 'clusters', mouseenterCursor);
    map.on('mouseleave', 'clusters', mouseLeaveCursor);
    map.on('mouseenter', 'unclustered-point', mouseenterCursor);
    map.on('mouseleave', 'unclustered-point', mouseLeaveCursor);
});




</script>

<%- include('includes/scripts') %>

  


  


